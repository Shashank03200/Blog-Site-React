{"version":3,"sources":["components/PostItem.module.css","components/AllPosts.module.css","components/PostItem.js","components/AllPosts.js"],"names":["module","exports","PostItem","props","authCtx","useContext","AuthContext","postData","post","postTitle","title","postContent","content","postId","Card","Body","style","textAlign","Title","className","classes","LeftAlignment","Text","to","userId","Button","variant","AllPosts","useState","posts","setPosts","isLoading","setIsLoading","useEffect","a","fetch","response","json","data","initialPosts","console","log","postObject","push","Container","Spinner","map","length"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,cAAgB,kC,mBCAlCD,EAAOC,QAAU,CAAC,UAAY,8B,2JCiCfC,EAzBE,SAACC,GAEd,IAAMC,EAAUC,qBAAWC,KAE3B,EAAmDH,EAAMI,SAASC,KAAnDC,EAAf,EAAQC,MAA2BC,EAAnC,EAA0BC,QACpBC,EAASV,EAAMU,OAKrB,OACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,CAAWC,MAAO,CAAEC,UAAW,QAA/B,UACI,cAACH,EAAA,EAAKI,MAAN,CAAYC,UAAWC,IAAQC,cAA/B,SAA+CZ,IAC/C,cAACK,EAAA,EAAKQ,KAAN,CAAWH,UAAWC,IAAQC,cAA9B,SACKV,IAEL,cAAC,IAAD,CAAMY,GAAI,IAAMnB,EAAQoB,OAAS,UAAYX,EAA7C,SACI,cAACY,EAAA,EAAD,CAAQC,QAAQ,UAAhB,0B,MC4BLC,UA5CE,WAEb,MAAwBC,qBAAxB,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEQR,EADQnB,qBAAWC,KACnBkB,OAwBR,OArBAS,oBAAS,sBAEL,oCAAAC,EAAA,sEAC2BC,MAAM,iEADjC,cACUC,EADV,gBAEuBA,EAASC,OAFhC,OAII,IAAW7B,KAFL8B,EAFV,OAGUC,EAAe,GACFD,EACfE,QAAQC,IAAI,mBACRH,EAAK9B,GAAMgB,SAAWA,IAChBkB,EAAa,CACf7B,OAAQL,EACRD,SAAU+B,EAAK9B,IAEnB+B,EAAaI,KAAKD,IAG1BZ,EAASS,GACTP,GAAa,GAfjB,4CAgBG,IAIH,eAACY,EAAA,EAAD,WAEQb,EAAY,cAACc,EAAA,EAAD,IACRhB,EAAMiB,KAAI,SAAAtC,GACN,OAAQ,cAAC,EAAD,CAA4BD,SAAUC,EAAKD,SAAUM,OAAQL,EAAKK,QAAnDL,EAAKK,WAIpCgB,GAA0B,IAAjBA,EAAMkB,QAAgB","file":"static/js/8.e6a17568.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftAlignment\":\"PostItem_LeftAlignment__1fxJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewButton\":\"AllPosts_NewButton__1WYWW\"};","\r\nimport React, { useContext } from 'react';\r\nimport classes from './PostItem.module.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nimport AuthContext from './../store/auth-context';\r\n\r\nconst PostItem = (props) => {\r\n\r\n    const authCtx = useContext(AuthContext);\r\n\r\n    const { title: postTitle, content: postContent } = props.postData.post;\r\n    const postId = props.postId;\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body style={{ textAlign: 'left' }}>\r\n                <Card.Title className={classes.LeftAlignment}>{postTitle}</Card.Title>\r\n                <Card.Text className={classes.LeftAlignment}>\r\n                    {postContent}\r\n                </Card.Text>\r\n                <Link to={'/' + authCtx.userId + '/posts/' + postId}>\r\n                    <Button variant=\"primary\">More</Button>\r\n                </Link>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default PostItem;","import { useContext, useEffect, useState } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Card, Button, Container } from 'react-bootstrap';\r\n\r\nimport Spinner from './Spinner';\r\n\r\nimport PostItem from './PostItem';\r\nimport classes from './AllPosts.module.css';\r\n\r\nimport AuthContext from '../store/auth-context';\r\n\r\nconst AllPosts = () => {\r\n\r\n    let [posts, setPosts] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const authCtx = useContext(AuthContext);\r\n    const { userId } = authCtx;\r\n\r\n\r\n    useEffect(\r\n\r\n        async () => {\r\n            const response = await fetch('https://blog-app-8981b-default-rtdb.firebaseio.com/posts.json');\r\n            const data = await response.json();\r\n            const initialPosts = [];\r\n            for (const post in data) {\r\n                console.log('Fetching posts ')\r\n                if (data[post].userId === userId) {\r\n                    const postObject = {\r\n                        postId: post,\r\n                        postData: data[post]\r\n                    }\r\n                    initialPosts.push(postObject);\r\n                }\r\n            }\r\n            setPosts(initialPosts);\r\n            setIsLoading(false);\r\n        }, []);\r\n\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                isLoading ? <Spinner /> :\r\n                    posts.map(post => {\r\n                        return (<PostItem key={post.postId} postData={post.postData} postId={post.postId} />)\r\n                    })\r\n            }\r\n            {\r\n                posts && posts.length === 0 && <p>No posts found. Create one!</p>\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AllPosts;"],"sourceRoot":""}